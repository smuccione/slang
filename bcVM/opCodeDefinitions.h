
/*

	fgl interperter and IL opcodes

*/

#pragma once

#define SLANG_OPS \
	DEF_OP ( noop ) \
	DEF_OP ( pushSymLocal ) \
	DEF_OP ( pushSymLocalRef ) \
	DEF_OP ( pushSymGlobal ) \
	DEF_OP ( pushSymGlobalRef ) \
	DEF_OP ( pushNumLong ) \
	DEF_OP ( pushNumDouble ) \
	DEF_OP ( pushUndefinedObject ) \
	DEF_OP ( pushString ) \
	DEF_OP ( pushAtom ) \
	DEF_OP ( pushCodeblock ) \
	DEF_OP ( pushSender ) \
	DEF_OP ( pushAArray ) \
	DEF_OP ( pushFixedArray ) \
	DEF_OP ( pushVariableArray ) \
	DEF_OP ( pushNullArray ) \
	DEF_OP ( pushNull ) \
	DEF_OP ( pushResult ) \
	DEF_OP ( pushObjIVar ) \
	DEF_OP ( pushObjIVarRef ) \
	DEF_OP ( pushObjIVarRel ) \
	DEF_OP ( pushObjIVarRelRef ) \
	DEF_OP ( pushObjVirtIVar ) \
	DEF_OP ( pushObjVirtIVarRef ) \
	DEF_OP ( pushObjVirtIVarRel ) \
	DEF_OP ( pushObjVirtIVarRelRef ) \
	DEF_OP ( pushClassGlobal ) \
	DEF_OP ( pushClassGlobalRef ) \
	DEF_OP ( pushContext ) \
	DEF_OP ( modifyContext ) \
	DEF_OP ( pushContextVirt ) \
	DEF_OP ( modifyContextVirt ) \
	DEF_OP ( pushParamPack ) \
	DEF_OP ( makeEnumerator ) \
	DEF_OP ( makeParamPack ) \
	DEF_OP ( castBool ) \
	DEF_OP ( castBooli ) \
	DEF_OP ( castInt ) \
	DEF_OP ( castDouble ) \
	DEF_OP ( castString ) \
	DEF_OP ( castObject ) \
	DEF_OP ( castArray ) \
	DEF_OP ( castFunction ) \
	DEF_OP ( castRef ) \
	DEF_OP ( reserve ) \
	DEF_OP ( pop ) \
	DEF_OP ( popadup ) \
	DEF_OP ( dupv ) \
	DEF_OP ( move ) \
	DEF_OP ( deref ) \
	DEF_OP ( storeLocalNull ) \
	DEF_OP ( storeMulti ) \
	DEF_OP ( storeMultiPop ) \
	DEF_OP ( storeLocal ) \
	DEF_OP ( storeLocalv ) \
	DEF_OP ( storeLocalPop ) \
	DEF_OP ( storeLocalPopv ) \
	DEF_OP ( storeGlobal ) \
	DEF_OP ( storeGlobalv ) \
	DEF_OP ( storeGlobalPop ) \
	DEF_OP ( storeGlobalPopv ) \
	DEF_OP ( storeClassIVar ) \
	DEF_OP ( storeClassIVarPop ) \
	DEF_OP ( storeClassIVarRel ) \
	DEF_OP ( storeClassIVarRelPop ) \
	DEF_OP ( storeClassVirtIVar ) \
	DEF_OP ( storeClassVirtIVarPop ) \
	DEF_OP ( storeClassVirtIVarRel ) \
	DEF_OP ( storeClassVirtIVarRelPop ) \
	DEF_OP ( store ) \
	DEF_OP ( storePop ) \
	DEF_OP ( storeClassGlobal ) \
	DEF_OP ( storeClassGlobalPop ) \
	DEF_OP ( incRef ) \
	DEF_OP ( incLocali ) \
	DEF_OP ( incLocald ) \
	DEF_OP ( incLocalv ) \
	DEF_OP ( incGlobalv ) \
	DEF_OP ( incClassIVar) \
	DEF_OP ( incClassVirtIVar) \
	DEF_OP ( decRef ) \
	DEF_OP ( decLocali ) \
	DEF_OP ( decLocald ) \
	DEF_OP ( decLocalv ) \
	DEF_OP ( decGlobalv ) \
	DEF_OP ( decClassIVar) \
	DEF_OP ( decClassVirtIVar) \
	DEF_OP ( storeLocalAdd ) \
	DEF_OP ( storeLocalSub ) \
	DEF_OP ( storeLocalMul ) \
	DEF_OP ( storeLocalDiv ) \
	DEF_OP ( storeLocalMod ) \
	DEF_OP ( storeLocalPow ) \
	DEF_OP ( storeLocalBwAnd ) \
	DEF_OP ( storeLocalBwOr ) \
	DEF_OP ( storeLocalBwXor ) \
	DEF_OP ( storeLocalShLeft ) \
	DEF_OP ( storeLocalShRight ) \
	DEF_OP ( storeGlobalAdd ) \
	DEF_OP ( storeGlobalSub ) \
	DEF_OP ( storeGlobalMul ) \
	DEF_OP ( storeGlobalDiv ) \
	DEF_OP ( storeGlobalMod ) \
	DEF_OP ( storeGlobalPow ) \
	DEF_OP ( storeGlobalBwAnd ) \
	DEF_OP ( storeGlobalBwOr ) \
	DEF_OP ( storeGlobalBwXor ) \
	DEF_OP ( storeGlobalShLeft ) \
	DEF_OP ( storeGlobalShRight ) \
	DEF_OP ( storeClassIVarAdd ) \
	DEF_OP ( storeClassIVarSub ) \
	DEF_OP ( storeClassIVarMul ) \
	DEF_OP ( storeClassIVarDiv ) \
	DEF_OP ( storeClassIVarMod ) \
	DEF_OP ( storeClassIVarPow ) \
	DEF_OP ( storeClassIVarBwAnd ) \
	DEF_OP ( storeClassIVarBwOr ) \
	DEF_OP ( storeClassIVarBwXor ) \
	DEF_OP ( storeClassIVarShLeft ) \
	DEF_OP ( storeClassIVarShRight ) \
	DEF_OP ( storeClassVirtIVarAdd ) \
	DEF_OP ( storeClassVirtIVarSub ) \
	DEF_OP ( storeClassVirtIVarMul ) \
	DEF_OP ( storeClassVirtIVarDiv ) \
	DEF_OP ( storeClassVirtIVarMod ) \
	DEF_OP ( storeClassVirtIVarPow ) \
	DEF_OP ( storeClassVirtIVarBwAnd ) \
	DEF_OP ( storeClassVirtIVarBwOr ) \
	DEF_OP ( storeClassVirtIVarBwXor ) \
	DEF_OP ( storeClassVirtIVarShLeft ) \
	DEF_OP ( storeClassVirtIVarShRight ) \
	DEF_OP ( storeRefAdd ) \
	DEF_OP ( storeRefSub ) \
	DEF_OP ( storeRefMul ) \
	DEF_OP ( storeRefDiv ) \
	DEF_OP ( storeRefMod ) \
	DEF_OP ( storeRefPow ) \
	DEF_OP ( storeRefBwAnd ) \
	DEF_OP ( storeRefBwOr ) \
	DEF_OP ( storeRefBwXor ) \
	DEF_OP ( storeRefShLeft ) \
	DEF_OP ( storeRefShRight ) \
	DEF_OP ( storeArray ) \
	DEF_OP ( storeArrayPop ) \
	DEF_OP ( once ) \
	DEF_OP ( jmp ) \
	DEF_OP ( jmpc )									/* jmp on condition true  */ \
	DEF_OP ( jmpcv )								/* jmp on condition true  */ \
	DEF_OP ( jmpcpop ) \
	DEF_OP ( jmpcpopv ) \
	DEF_OP ( jmpcpop2 ) \
	DEF_OP ( jmpnc )								/* jmp on condition false (not condition) */ \
	DEF_OP ( jmpncv ) \
	DEF_OP ( jmpncpop ) \
	DEF_OP ( jmpncpopv ) \
	DEF_OP ( jmpnnull ) \
	DEF_OP ( jmpGlobalNoInit ) \
	DEF_OP ( result ) \
	DEF_OP ( resultv ) \
	DEF_OP ( ret ) \
	DEF_OP ( pRet ) \
	DEF_OP ( callDefValue ) \
	DEF_OP ( callV ) \
	DEF_OP ( callVPop ) \
	DEF_OP ( callVSafe ) \
	DEF_OP ( callVSafePop ) \
	DEF_OP ( callPPackSafe ) \
	DEF_OP ( callPPackSafePop ) \
	DEF_OP ( callPPack ) \
	DEF_OP ( callPPackPop ) \
	DEF_OP ( callBC ) \
	DEF_OP ( callBCPop ) \
	DEF_OP ( callC ) \
	DEF_OP ( callCPop ) \
	DEF_OP ( callBCVirt ) \
	DEF_OP ( callBCVirtPop ) \
	DEF_OP ( callCVirt ) \
	DEF_OP ( callCVirtPop ) \
	DEF_OP ( callCB ) \
	DEF_OP ( callCBPop ) \
	DEF_OP ( callBCTail ) \
	DEF_OP ( objBuild )								/* used for inlining.  does not call a constructor, just builds the object and registers the destructor */ \
	DEF_OP ( objConstruct ) \
	DEF_OP ( objConstructV ) \
	DEF_OP ( objRelease ) \
	DEF_OP ( objAccess ) \
	DEF_OP ( objAccessInd ) \
	DEF_OP ( objAccessIndSafe ) \
	DEF_OP ( objAccessRef  )						/* push's a reference to the element on to the stack ) \ not the value...  */ \
	DEF_OP ( objAccessRefInd )						/* push's a reference to the element on to the stack ) \ not the value...  */ \
	DEF_OP ( objStore ) \
	DEF_OP ( objStoreInd ) \
	DEF_OP ( objStorePop ) \
	DEF_OP ( objStoreIndPop ) \
	DEF_OP ( objCall ) \
	DEF_OP ( objCallPop ) \
	DEF_OP ( objCallPPack ) \
	DEF_OP ( objCallPPackPop ) \
	DEF_OP ( objCallFuncOv ) \
	DEF_OP ( objCallFuncOvPop ) \
	DEF_OP ( evaluate ) \
	DEF_OP ( promote ) \
	DEF_OP ( addi ) \
	DEF_OP ( subi ) \
	DEF_OP ( divi ) \
	DEF_OP ( muli ) \
	DEF_OP ( modi ) \
	DEF_OP ( powi ) \
	DEF_OP ( maxi ) \
	DEF_OP ( mini ) \
	DEF_OP ( negi ) \
	DEF_OP ( twoci ) \
	DEF_OP ( noti ) \
	DEF_OP ( addiImm ) \
	DEF_OP ( subiImm ) \
	DEF_OP ( diviImm ) \
	DEF_OP ( muliImm ) \
	DEF_OP ( modiImm ) \
	DEF_OP ( powiImm ) \
	DEF_OP ( maxiImm ) \
	DEF_OP ( miniImm ) \
	DEF_OP ( addd ) \
	DEF_OP ( subd ) \
	DEF_OP ( divd ) \
	DEF_OP ( muld ) \
	DEF_OP ( powd ) \
	DEF_OP ( maxd ) \
	DEF_OP ( mind ) \
	DEF_OP ( negd ) \
	DEF_OP ( notd ) \
	DEF_OP ( adddImm ) \
	DEF_OP ( subdImm ) \
	DEF_OP ( divdImm ) \
	DEF_OP ( muldImm ) \
	DEF_OP ( maxdImm ) \
	DEF_OP ( mindImm ) \
	DEF_OP ( adds ) \
	DEF_OP ( addsmulti ) \
	DEF_OP ( cmps ) \
	DEF_OP ( nots ) \
	DEF_OP ( notv ) \
	DEF_OP ( addv ) \
	DEF_OP ( subv ) \
	DEF_OP ( divv ) \
	DEF_OP ( mulv ) \
	DEF_OP ( modv ) \
	DEF_OP ( powv ) \
	DEF_OP ( maxv ) \
	DEF_OP ( minv ) \
	DEF_OP ( negv ) \
	DEF_OP ( twocv ) \
	DEF_OP ( notSafev ) \
	DEF_OP ( addSafev ) \
	DEF_OP ( subSafev ) \
	DEF_OP ( divSafev ) \
	DEF_OP ( mulSafev ) \
	DEF_OP ( modSafev ) \
	DEF_OP ( powSafev ) \
	DEF_OP ( maxSafev ) \
	DEF_OP ( minSafev ) \
	DEF_OP ( negSafev ) \
	DEF_OP ( twocSafev ) \
	DEF_OP ( waStarts ) \
	DEF_OP ( waStarti ) \
	DEF_OP ( waStartInd ) \
	DEF_OP ( waStartIndi ) \
	DEF_OP ( waStartInds ) \
	DEF_OP ( waEnd ) \
	DEF_OP ( waPushField ) \
	DEF_OP ( waPushFieldInd ) \
	DEF_OP ( waStoreField ) \
	DEF_OP ( waStoreFieldInd ) \
	DEF_OP ( waStoreFieldPop ) \
	DEF_OP ( waStoreFieldIndPop ) \
	DEF_OP ( lti ) \
	DEF_OP ( lteqi ) \
	DEF_OP ( gti ) \
	DEF_OP ( gteqi ) \
	DEF_OP ( eqi ) \
	DEF_OP ( eqi1 ) \
	DEF_OP ( neqi ) \
	DEF_OP ( ltiImm ) \
	DEF_OP ( lteqiImm ) \
	DEF_OP ( gtiImm ) \
	DEF_OP ( gteqiImm ) \
	DEF_OP ( eqiImm ) \
	DEF_OP ( neqiImm ) \
	DEF_OP ( bworiImm ) \
	DEF_OP ( bwandiImm) \
	DEF_OP ( bwxoriImm) \
	DEF_OP ( ltd ) \
	DEF_OP ( lteqd ) \
	DEF_OP ( gtd ) \
	DEF_OP ( gteqd ) \
	DEF_OP ( eqd ) \
	DEF_OP ( eqd1 ) \
	DEF_OP ( neqd ) \
	DEF_OP ( ltdImm ) \
	DEF_OP ( lteqdImm ) \
	DEF_OP ( gtdImm ) \
	DEF_OP ( gteqdImm ) \
	DEF_OP ( eqdImm ) \
	DEF_OP ( neqdImm ) \
	DEF_OP ( lts ) \
	DEF_OP ( lteqs ) \
	DEF_OP ( gts ) \
	DEF_OP ( gteqs ) \
	DEF_OP ( aeqs ) \
	DEF_OP ( eqs ) \
	DEF_OP ( eqs1 ) \
	DEF_OP ( neqs ) \
	DEF_OP ( ltv ) \
	DEF_OP ( lteqv ) \
	DEF_OP ( gtv ) \
	DEF_OP ( gteqv ) \
	DEF_OP ( eqv ) \
	DEF_OP ( aeqv ) \
	DEF_OP ( eqv1 ) \
	DEF_OP ( neqv ) \
	DEF_OP ( bworv ) \
	DEF_OP ( bwandv ) \
	DEF_OP ( bwxorv ) \
	DEF_OP ( shlv ) \
	DEF_OP ( shrv ) \
	DEF_OP ( ltSafev ) \
	DEF_OP ( lteqSafev ) \
	DEF_OP ( gtSafev ) \
	DEF_OP ( gteqSafev ) \
	DEF_OP ( eqSafev ) \
	DEF_OP ( aeqSafev ) \
	DEF_OP ( neqSafev ) \
	DEF_OP ( bworSafev ) \
	DEF_OP ( bwandSafev ) \
	DEF_OP ( bwxorSafev ) \
	DEF_OP ( shlSafev ) \
	DEF_OP ( shrSafev ) \
	DEF_OP ( shliImm ) \
	DEF_OP ( shriImm ) \
	DEF_OP ( arrFixedDeref ) \
	DEF_OP ( arrDeref ) \
	DEF_OP ( arrFixedDerefRef ) \
	DEF_OP ( arrDerefRef ) \
	DEF_OP ( debugFuncStart ) \
	DEF_OP ( debugCheckHalt ) \
	DEF_OP ( debugBreak ) \
	DEF_OP ( debugTrace ) \
	DEF_OP ( debugTrap ) \
	DEF_OP ( profFuncStart ) \
	DEF_OP ( profFuncEnd ) \
	DEF_OP ( profCallStart) \
	DEF_OP ( profCallEnd) \
	DEF_OP ( profReset ) \
	DEF_OP ( prefix ) \
	DEF_OP ( chkstk )
